/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.poka.app.panel;

import com.poka.app.frame.PokaMainFrame;
import com.poka.app.frame.SqlServerCfgJDialog;
import com.poka.app.impl.LoginActionI;
import com.poka.dao.impl.BaseDaoSqlServer;
import com.poka.entity.MoneyData;
import com.poka.entity.PokaFsn;
import com.poka.entity.PokaFsnBody;
import com.poka.printer.com.ComClient;
import com.poka.socket.GuAoQin;
import com.poka.socket.KoreanBrandExtension;
import com.poka.socket.KoreanBrandExtensionHandler;
import com.poka.util.BundleDeal;
import com.poka.util.IOUtil;
import com.poka.util.LogManager;
import com.poka.util.PostekUtil;
import com.poka.util.StaticVar;
import com.poka.util.UploadFtp;
import com.poka.util.XmlSax;
import com.poka.util.argPro;
import gnu.io.CommPortIdentifier;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author poka
 */
public class GuanZiHaoDealJPanel extends javax.swing.JPanel implements ActionListener, LoginActionI {

    static final Logger logger = LogManager.getLogger(GuanZiHaoDealJPanel.class);



    public final void showPort(boolean b) {
        this.port.setVisible(b);
        this.portJLabel.setVisible(b);
    }

    /**
     * Creates new form GuanZiHaoDealJPanel
     */
    public GuanZiHaoDealJPanel() {
        initComponents();

        jPanel7.setVisible(false);
        this.stopDealjButton.setEnabled(false);

        this.showPort(false);

        if (XmlSax.getInstance().getDiaoChaoLogin().equals("1")) {
            userjLabel.setVisible(false);
        }

        this.xml = XmlSax.getInstance();

        xml.getFlowMoney(XmlSax.flowMoney);
        xml.getGRMech(XmlSax.machineA);

        String name = this.xml.getBnakName();
        if (name != null) {
            this.bankNamejTextField.setText(name);
        }
        String po = this.xml.getHPort();
        if (po != null) {
            this.port.setText(po);
        } else {
            this.port.setText("2221");
        }
        bankId = StaticVar.bankId;  //银行号
        netWorkId = StaticVar.agencyNo;  //网点号
        itemFlag = false;
        CommPortIdentifier portId = null;
        Enumeration portIdentifier = ComClient.getSerialPorts();
        while (portIdentifier.hasMoreElements()) {
            portId = (CommPortIdentifier) portIdentifier.nextElement();
            if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                this.comComboBox.addItem(portId.getName());
            }
        }
        String sItem = this.xml.getLastCom().trim();
        this.comComboBox.setEditable(false);
        if (sItem != null) {
            this.comComboBox.setSelectedItem(sItem);
        }
        String paper = this.xml.getLastPaperSize().trim();
        this.lastPaperSizeComboBox.setEditable(false);
        if (paper != null) {
            this.lastPaperSizeComboBox.setSelectedItem(paper);
        }
        this.meTypeComboBox.setModel(new DefaultComboBoxModel(mechType));
        int item = this.xml.getLastQF();
        this.meTypeComboBox.setSelectedIndex(item);
        if (item != 0) {
            sqlserverCfgjButton.setVisible(false);
        }
        itemFlag = true;

        if (filePath != null) {
            UploadFtp.newDir(filePath + File.separator + "TEM");
        }
    }
    private XmlSax xml;
    private boolean itemFlag = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        startDealjButton = new javax.swing.JButton();
        stopDealjButton = new javax.swing.JButton();
        initjButton = new javax.swing.JButton();
        sqlserverCfgjButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        liuTongMonLabel = new javax.swing.JLabel();
        liuTongBalist = new java.awt.List();
        liuTongKunjLabel = new javax.swing.JLabel();
        liuTongKunlist = new java.awt.List();
        liuTongBajLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        canSunkunlist = new java.awt.List();
        cansunMonLabel = new javax.swing.JLabel();
        canSunKunLabel = new javax.swing.JLabel();
        canSunBaLabel = new javax.swing.JLabel();
        canSunBalist = new java.awt.List();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        qingdianyuanjTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        shenheyuanjTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bankNamejTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        comComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        meTypeComboBox = new javax.swing.JComboBox();
        lastPaperSizeComboBox = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        bachoice1 = new javax.swing.JComboBox();
        portJLabel = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        userjLabel = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        userLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jijujTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        showjLabel = new javax.swing.JLabel();
        testButton = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(930, 670));
        setMinimumSize(new java.awt.Dimension(930, 670));
        setPreferredSize(new java.awt.Dimension(930, 670));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("数据传输"));
        jPanel1.setMaximumSize(new java.awt.Dimension(851, 549));
        jPanel1.setMinimumSize(new java.awt.Dimension(851, 549));
        jPanel1.setPreferredSize(new java.awt.Dimension(910, 670));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        startDealjButton.setText("启动");
        startDealjButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startDealjButtonMouseClicked(evt);
            }
        });

        stopDealjButton.setText("停止");
        stopDealjButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopDealjButtonMouseClicked(evt);
            }
        });

        initjButton.setText("初始化");
        initjButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                initjButtonMouseClicked(evt);
            }
        });

        sqlserverCfgjButton.setText("数据库配置");
        sqlserverCfgjButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sqlserverCfgjButtonMouseClicked(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "流通钞", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        liuTongMonLabel.setText("冠字号个数:0");

        liuTongKunjLabel.setText("捆数:0");

        liuTongBajLabel.setText("把数:0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(liuTongKunlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(liuTongBalist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(liuTongMonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .addComponent(liuTongBajLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addComponent(liuTongKunjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(liuTongMonLabel)
                .addGap(18, 18, 18)
                .addComponent(liuTongBajLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(liuTongBalist, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(liuTongKunjLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(liuTongKunlist, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "残损券", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        cansunMonLabel.setText("冠字号个数:0");

        canSunKunLabel.setText("捆数:0");

        canSunBaLabel.setText("把数:0");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canSunkunlist, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(canSunBalist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(canSunKunLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(canSunBaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cansunMonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cansunMonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(canSunBaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canSunBalist, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canSunKunLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canSunkunlist, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(startDealjButton)
                .addGap(68, 68, 68)
                .addComponent(stopDealjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(initjButton)
                .addGap(50, 50, 50)
                .addComponent(sqlserverCfgjButton)
                .addGap(45, 45, 45))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startDealjButton)
                    .addComponent(stopDealjButton)
                    .addComponent(initjButton)
                    .addComponent(sqlserverCfgjButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 17, -1, -1));

        jLabel5.setText("清点员:");

        com.poka.util.LimitDocument lit2q = new com.poka.util.LimitDocument(8);

        qingdianyuanjTextField.setDocument(lit2q);

        jLabel6.setText("审核员:");

        com.poka.util.LimitDocument lit1q = new com.poka.util.LimitDocument(8);

        shenheyuanjTextField.setDocument(lit1q);

        jLabel2.setText("银行名称:");

        jLabel12.setText("每捆把数:");

        jLabel10.setText("打印机COM口:");

        comComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comComboBoxItemStateChanged(evt);
            }
        });

        jLabel7.setText("清分机类型:");

        meTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                meTypeComboBoxItemStateChanged(evt);
            }
        });

        lastPaperSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "155*77", "100*50" }));
        lastPaperSizeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lastPaperSizeComboBoxItemStateChanged(evt);
            }
        });

        jLabel14.setText("封签尺寸:");

        bachoice1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "5" }));

        portJLabel.setText("端  口:");

        com.poka.util.LimitDocument litPort = new com.poka.util.LimitDocument(8);
        litPort.setAllowChar("0123456789");
        port.setDocument(litPort);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(shenheyuanjTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(qingdianyuanjTextField)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(bachoice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bankNamejTextField)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addGap(2, 2, 2)
                            .addComponent(comComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(8, 8, 8)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(meTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lastPaperSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(portJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel14))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(port))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(qingdianyuanjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(shenheyuanjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bankNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bachoice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(comComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(meTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(lastPaperSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 115, 277, 320));

        jLabel4.setText("* 在将要离开页面时,请点击停止按钮,保证数据的完整性");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 603, 580, -1));

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userjLabel.setText("当前用户：");
        jPanel4.add(userjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 60, 23));

        logoutButton.setText("退出登录");
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });
        jPanel4.add(logoutButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, -1));
        jPanel4.add(userLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 79, 23));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 17, 277, 92));

        jLabel9.setText("(14位)");

        jLabel8.setText("机具号:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(showjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jijujTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addGap(43, 43, 43))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jijujTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 490, 290, -1));

        testButton.setText("打印机测试");
        testButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testButtonMouseClicked(evt);
            }
        });
        jPanel1.add(testButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 450, -1, 36));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private String usercode = "";

    /**
     * 开始处理冠字号数据库数据
     *
     * @param chenbo
     */
    private void startDealjButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startDealjButtonMouseClicked
        this.cansunMonLabel.setText("已打捆数为: 0");
        this.canSunkunlist.clear();
//        int iRet = checkUser();
//        if (iRet == -1 || iRet == 1) {
//            JOptionPane.showMessageDialog(null, "请输入正确的清点员和审核员！");
//            this.qingdianyuanjTextField.selectAll();
//            return;
//        } else if (iRet == 2) {
//            JOptionPane.showMessageDialog(null, "请输入正确的审核员！");
//            this.shenheyuanjTextField.selectAll();
//            return;
//        }
        inventory = this.qingdianyuanjTextField.getText().trim();
        auditer = this.shenheyuanjTextField.getText().trim();

        //  jiju = this.jijujTextField.getText().trim();
        bankName = bankNamejTextField.getText().trim();
        if ("".equals(inventory) || inventory.trim().length() > 8) {
            JOptionPane.showMessageDialog(null, "请输入正确的清点员.");
            qingdianyuanjTextField.requestFocus();
            qingdianyuanjTextField.selectAll();
            return;
        }
        if ("".equals(auditer) || auditer.trim().length() > 8) {
            JOptionPane.showMessageDialog(null, "请输入正确的复核员为空.");
            shenheyuanjTextField.requestFocus();
            shenheyuanjTextField.selectAll();
            return;
        }
//        if ("".equals(jiju)) {
//            JOptionPane.showMessageDialog(null, "机具号为空.");
//            jijujTextField.requestFocus();
//            jijujTextField.selectAll();
//            return;
//        }

        if ("".equals(bankName)) {
            JOptionPane.showMessageDialog(null, "银行名称为空.");
            bankNamejTextField.requestFocus();
            bankNamejTextField.selectAll();
            return;
        }

        bashu = Integer.parseInt(bachoice1.getSelectedItem().toString().trim());
        args = new String[4 + bashu];
        argsC = new String[4 + bashu];

        //  Map<String, Object> myArg = new HashMap<String, Object>();
        //  myArg.put("baCount", bashu);
//        BaseDao<Map> b = new BaseDao<Map>();ssss
//        String sql = "select GetMoneyId(100,:baCount) from DUAL";  //从数据库获取卷别
//        String result = b.getFunc(sql, myArg);
        //   juanbie = result;  //将获取到的值赋给变量
        args[2] = this.qingdianyuanjTextField.getText().trim();
        args[3] = this.shenheyuanjTextField.getText().trim();

        argsC[2] = this.qingdianyuanjTextField.getText().trim();
        argsC[3] = this.shenheyuanjTextField.getText().trim();

        this.stopDealjButton.setEnabled(true);
        this.startDealjButton.setEnabled(false);
        this.qingdianyuanjTextField.setEditable(false);
        this.shenheyuanjTextField.setEditable(false);
        //this.jijujTextField.setEditable(false);
        this.initjButton.setEnabled(false);
        this.sqlserverCfgjButton.setEnabled(false);
        this.bankNamejTextField.setEditable(false);

        this.xml.setHPort(this.port.getText().trim());

        this.bachoice1.setEnabled(false);
        comComboBox.setEnabled(false);
        meTypeComboBox.setEnabled(false);
        lastPaperSizeComboBox.setEnabled(false);
        myTimer.start();

    }//GEN-LAST:event_startDealjButtonMouseClicked
    /**
     * 停止数据操作
     *
     * @param evt
     */
    private void stopDealjButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopDealjButtonMouseClicked
        Object[] options = {"确定", "取消"};
        int response = JOptionPane.showOptionDialog(this, "是否确认停止?", "提示", JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (response == 0) {
            myTimer.stop();
            this.kunCo = 0;
            this.startDealjButton.setEnabled(true);
            this.stopDealjButton.setEnabled(false);
            this.qingdianyuanjTextField.setEditable(true);
            this.shenheyuanjTextField.setEditable(true);
            // this.jijujTextField.setEditable(true);
            this.bankNamejTextField.setEditable(true);
            this.initjButton.setEnabled(true);
            this.sqlserverCfgjButton.setEnabled(true);

            this.bachoice1.setEnabled(true);
            comComboBox.setEnabled(true);
            meTypeComboBox.setEnabled(true);
            lastPaperSizeComboBox.setEnabled(true);

            this.liuTongBalist.clear();
            this.liuTongKunlist.clear();
            this.myList.clear();
            this.canSunkunlist.clear();
            this.canSunBalist.clear();

            this.liuTongBajLabel.setText("把数:0");
            this.liuTongKunjLabel.setText("捆数:0");
            this.canSunBaLabel.setText("把数:0");
            this.canSunKunLabel.setText("捆数:0");

            this.liuTongMonLabel.setText("冠字号个数:0");
            this.cansunMonLabel.setText("冠字号个数:0");
            pokaFsn = new PokaFsn();
            pokaFsnC = new PokaFsn();

            guanNumc = 0;
            guanNum = 0;
            countA = 0;
            countB = 0;
            countAc = 0;
            countBc = 0;

            if (4 == meTypeComboBox.getSelectedIndex() || 5 == meTypeComboBox.getSelectedIndex()) {
                koreadLis.stop();
                koread_flag = false;
            }
        } else {

        }

    }//GEN-LAST:event_stopDealjButtonMouseClicked

    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        if (myTimer.isRunning()) {
            JOptionPane.showMessageDialog(null, "请先停止该页面的操作再退出");
            return;
        } else {
            if (pokaMain.login) {
                pokaMain.login = false;
                this.pokaMain.atmMenu.setEnabled(true);
                this.pokaMain.getGuangdianMenu().setEnabled(true);
                this.stopDealjButton.doClick();
                this.pokaMain.chenbo.removeAll();
                this.pokaMain.chenbo.repaint();
                this.pokaMain.fileChangeMenu.setEnabled(true);
                //   this.xml.setMechineNO(this.jijujTextField.getText().trim());
                this.xml.setBnakName(this.bankNamejTextField.getText().trim());
            }
        }
    }//GEN-LAST:event_logoutButtonMouseClicked
    /**
     * 初始化数据库
     *
     * @param evt
     */
    private void initjButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_initjButtonMouseClicked
        if (initjButton.isEnabled()) {
            Object[] options = {"确定", "取消"};
            String txt = null;
            if (meTypeComboBox.getSelectedIndex() == 0) {
                txt = "初始化操作将删除表中所有数据,是否执行";
            } else {
                txt = "初始化操作将删除目录中所有文件,是否执行";
            }
            int response = JOptionPane.showOptionDialog(this, txt, "提示", JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (response == 0) {
                if (meTypeComboBox.getSelectedIndex() == 0) {
                    if (moneyBase == null || dbreload) {
                        moneyBase = new BaseDaoSqlServer<Map>();
                        dbreload = false;
                    }
                    String delsql = "truncate table MoneyData";
                    int result = moneyBase.executeSql(delsql, null);
                    JOptionPane.showMessageDialog(null, "数据库初始化完成.");
                } else {
                    if (this.filePath != null) {
                        IOUtil.deleteDir(new File(filePath));
                    }
                    JOptionPane.showMessageDialog(null, "初始化完成.");
                }

                this.canSunkunlist.clear();
                this.canSunBalist.clear();
                this.liuTongBalist.clear();
                this.liuTongKunlist.clear();

                this.myList.clear();
                this.myListC.clear();

                guanNumc = 0;
                guanNum = 0;
                countA = 0;
                countB = 0;
                countAc = 0;
                countBc = 0;
                guanNum = 0;

                this.liuTongBalist.clear();
                this.liuTongKunlist.clear();
                this.myList.clear();
                this.canSunkunlist.clear();
                this.canSunBalist.clear();

                this.liuTongBajLabel.setText("把数:0");
                this.liuTongKunjLabel.setText("捆数:0");
                this.canSunBaLabel.setText("把数:0");
                this.canSunKunLabel.setText("捆数:0");

                this.liuTongMonLabel.setText("冠字号个数:0");
                this.cansunMonLabel.setText("冠字号个数:0");
                this.koread_flag = false;

            }

        }

    }//GEN-LAST:event_initjButtonMouseClicked

    private void sqlserverCfgjButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sqlserverCfgjButtonMouseClicked
        if (initjButton.isEnabled()) {
            SqlServerCfgJDialog cfg = new SqlServerCfgJDialog(this.pokaMain, true);
            cfg.show();
            dbreload = true;
        }
    }//GEN-LAST:event_sqlserverCfgjButtonMouseClicked

    private void comComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comComboBoxItemStateChanged
        if (itemFlag) {
            String com = (String) this.comComboBox.getSelectedItem();
            this.xml.setLastCom(com);
        }
    }//GEN-LAST:event_comComboBoxItemStateChanged

    private void testButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testButtonMouseClicked
        PostekUtil post = new PostekUtil();
        String com = (String) this.comComboBox.getSelectedItem();
        int paper = this.lastPaperSizeComboBox.getSelectedIndex();
        if (0 == paper) {
            post.printWZ(com, "2014-10-24", "测试员一", "100", "测试员二", "123456789012345678901234", "打印测试", 10);
        } else {
            post.printGX100X50(com, "2014-10-24", "测试员一", "100", "测试员二", "123456789012345678901234", "打印测试", 10);
        }
    }//GEN-LAST:event_testButtonMouseClicked

    private void lastPaperSizeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lastPaperSizeComboBoxItemStateChanged
        if (itemFlag) {
            String paper = (String) this.lastPaperSizeComboBox.getSelectedItem();
            this.xml.setLastPaperSize(paper);
        }
    }//GEN-LAST:event_lastPaperSizeComboBoxItemStateChanged

    private void meTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_meTypeComboBoxItemStateChanged
        if (itemFlag) {
            int paper = this.meTypeComboBox.getSelectedIndex();
            this.xml.setLastQF(paper);
            if (0 == paper) {
                sqlserverCfgjButton.setVisible(true);
                showPort(false);
            } else {
                sqlserverCfgjButton.setVisible(false);
                if (4 == paper || 5 == paper) {
                    showPort(true);
                } else {
                    showPort(false);
                }
            }
        }
    }//GEN-LAST:event_meTypeComboBoxItemStateChanged

    int kunCo = 0;
    //private boolean addFlag = false;

    private void getDataFromDB(int machineId, int type) {
        String monVal = "";
        String sql;
        int count = 0;
        int baCo = 0;
        BigInteger maxdelid = BigInteger.valueOf(0);
        String[] bas;
        myList.clear();
        java.awt.List curBaList;
        java.awt.List curKunList;
        javax.swing.JLabel curBaLabel;
        javax.swing.JLabel curKunLabel;
        javax.swing.JLabel curMonLabel;
        PokaFsn fsn;
        String machineMane;
        String monType;
        int curNum;
        if (type == 1) {
            curMonLabel = this.liuTongMonLabel;
            curNum = guanNum;
            fsn = this.pokaFsn;
            bas = this.args;
            curBaLabel = this.liuTongBajLabel;
            curKunLabel = this.liuTongKunjLabel;
            curBaList = this.liuTongBalist;
            curKunList = this.liuTongKunlist;
            baCo = this.countA + this.countB;
            monType = xml.getFlowMoney(XmlSax.flowMoney);
            if (machineId == 1) {
                machineMane = xml.getGRMech(XmlSax.machineA);
                count = this.countA;
            } else {
                count = this.countB;
                machineMane = xml.getGRMech(XmlSax.machineB);
            }
        } else {
            curMonLabel = this.cansunMonLabel;
            curNum = guanNumc;
            curBaLabel = this.canSunBaLabel;
            curKunLabel = this.canSunKunLabel;
            fsn = this.pokaFsnC;
            curBaList = this.canSunBalist;
            curKunList = this.canSunkunlist;
            baCo = this.countAc + this.countBc;
            bas = this.argsC;
            monType = xml.getFlowMoney(XmlSax.damagedMoney);
            if (machineId == 1) {
                count = this.countAc;
                machineMane = xml.getGRMech(XmlSax.machineA);
            } else {
                count = this.countBc;
                machineMane = xml.getGRMech(XmlSax.machineB);
            }
        }

        Map<String, Object> myMap1 = new HashMap<String, Object>();
        StringBuilder bf = new StringBuilder();
        StringBuilder bf1 = new StringBuilder();
        String[] tem = monType.split("|");
        if (count == 0) {
            bf.append("select top 100 * from MoneyData where MachineId=:machineId and (");
            int a = 0;
            for (String ss : tem) {
                if (ss == null || ss.equals("") || ss.equals("|")) {
                    continue;
                }
                if (a > 0) {
                    bf1.append(" OR ");
                }
                bf1.append(" BVResult=");
                bf1.append(ss);
                bf1.append(" ");
                a++;
            }
            bf.append(bf1.toString());
            bf.append(")");
            sql = bf.toString();
        } else {

            bf.append("select top 100 * from MoneyData where MachineId=:machineId and (");
            int a = 0;

            for (String ss : tem) {
                if (ss == null || ss.equals("") || ss.equals("|")) {
                    continue;
                }
                if (a > 0) {
                    bf1.append(" OR ");
                }
                bf1.append(" BVResult=");
                bf1.append(ss);
                bf1.append(" ");
                a++;
            }
            bf.append(bf1.toString());
            bf.append(")");
            bf.append(" and id > (");
            bf.append("select max(id) from (");
            bf.append("select top ");
            bf.append(100 * count);
            bf.append(" id from moneydata where MachineId=:machineId and (");
            bf.append(bf1.toString());
            bf.append(")");
            bf.append(" order by id");
            bf.append(") as t");
            bf.append(") order by id");

            sql = bf.toString();
//                    "select top 100 * from moneydata where " + "MachineId=:machineId and BVResult=:type and id > ("
//                    + "select max(id) from ("
//                    + "select top " + 100 * count + " id from moneydata where MachineId=:machineId and BVResult=:type"
//                    + " order by id"
//                    + ") as t"
//                    + ") order by id";
        }
        myMap1.put("machineId", machineMane);
        //    myMap1.put("type", type);
        if (moneyBase == null || dbreload) {
            moneyBase = new BaseDaoSqlServer<Map>();
            dbreload = false;
        }
        List<Map> moneyList = moneyBase.findBySql(sql, myMap1);
        int len = moneyList.size();

        if (100 == len) {
            curBaList.clear();
            curNum += 100;
            for (int i = 0; i < len; i++) {
                HashMap m = (HashMap) moneyList.get(i);
                maxdelid = (BigInteger) m.get("ID");
                BigInteger id = (BigInteger) m.get("ID");
                Date coltime = (Date) m.get("COLTIME");
                String mon = m.get("MON") == null ? "" : m.get("MON").toString();
                String montype = m.get("MONTYPE") == null ? "" : m.get("MONTYPE").toString();
                String monval = m.get("MONVAL") == null ? "" : m.get("MONVAL").toString();
                String monver = m.get("MONVER") == null ? "" : m.get("MONVER").toString();
                String trueflag = m.get("TRUEFLAG") == null ? "" : m.get("TRUEFLAG").toString();
                String quanlity = m.get("QUANLITY") == null ? "" : m.get("QUANLITY").toString();
                String operatorid = m.get("OPERATORID") == null ? "" : m.get("OPERATORID").toString();
                Date insertdatetime = (Date) m.get("INSERTDATETIME");
                MoneyData md = new MoneyData(coltime, id, insertdatetime, mon.trim(), montype.trim(), monval.trim(), monver.trim(), operatorid.trim(), quanlity.trim(), trueflag.trim(), machineMane);
                myList.add(md);
                curBaList.add(mon);
            }

            String baID = IOUtil.getBaID(machineMane);  //获得把ID
            //curBaList.add(baID);
            for (MoneyData m : myList) {
                PokaFsnBody p = new PokaFsnBody();
                Date pokadate = m.getColtime();
                int year = pokadate.getYear();
                String myYear = String.valueOf(year + 1900);
                String onemouth = pokadate.getMonth() + 1 < 10 ? "0" + (pokadate.getMonth() + 1) : "" + (pokadate.getMonth() + 1);
                String onedate = pokadate.getDate() < 10 ? "0" + pokadate.getDate() : "" + pokadate.getDate();
                String lastDate = myYear + onemouth + onedate;
                p.setDate(lastDate);
                String ss = String.valueOf(pokadate.getHours());
                String mm = String.valueOf(pokadate.getMinutes());
                String second = String.valueOf(pokadate.getSeconds());
                p.setTime(ss + ":" + mm + ":" + second);
                p.setTfFlag(m.getTrueFlag());
                // p.setErrorCode("");
                p.setMoneyFlag(m.getMonType());
                int moneyVer = 0;
                if (m.getMonVer().equals("2005")) {
                    moneyVer = 2;
                } else if (m.getMonVer().equals("1999")) {
                    moneyVer = 1;
                } else if (m.getMonVer().equals("1990")) {
                    moneyVer = 0;
                } else {
                    moneyVer = 9999;
                }
                p.setVer(moneyVer);
                monVal = m.getMonVal();
                p.setValuta(Integer.parseInt(m.getMonVal()));
                p.setCharNum(m.getMon().length());
                p.setsNo(m.getMon());
                p.setMacinSno(machineMane);
                p.setReservel("");
                // p.setImageSNo(null);
                p.setBundleId(baID);
                p.setUserId1(this.qingdianyuanjTextField.getText().trim());  //打包员
                p.setUserId2(this.shenheyuanjTextField.getText().trim());  //复核员
                //p.setmonboxID
                //p.setAtmId();
                p.setUserId3(""); //加钞员
                p.setUserId4("");  //监督员
                p.setFlag((byte) 0);
                fsn.getbList().add(p);
                fsn.getFhead().setCount(fsn.getFhead().getCount() + 1);
            }
            fsn.getBundleIdList().add(baID);
            bas[baCo + 4] = baID;
        } else {
            moneyList.clear();
            return;
        }

        count++;
        baCo++;

        curMonLabel.setText("冠字号个数:" + curNum);
        if (type == 1) {
            guanNum += 100;
            if (machineId == 1) {
                this.countA++;
            } else {
                this.countB++;
            }
        } else {
            guanNumc += 100;
            if (machineId == 1) {
                this.countAc++;

            } else {
                this.countBc++;

            }
        }
        curBaLabel.setText("把数:" + baCo);
        if (baCo == bashu) {
            if (curKunList.getItemCount() > 50) {
                curKunList.clear();
            }

            juanbie = this.xml.getQuans(monVal, "" + bashu);
            if (this.xml.getDiaoChaoLogin().equals("1")) {
                StaticVar.loginUser = qingdianyuanjTextField.getText();
            }
            //生成捆ID                     
            String kunID = BundleDeal.productBKbunId(StaticVar.loginUser, juanbie, type);
            //生成fsn            
            Date date = BundleDeal.getDBTime();
            //String mydate = new SimpleDateFormat("yyyyMMddHHmmssS").format(date);
            String fsnFileName = bankId + "_" + netWorkId + "_XXXXXXXXXXXXXX_" + kunID + ".FSN";
            String mypath = StaticVar.cfgMap.get(argPro.localAddr) + File.separator + UploadFtp.tem + File.separator + fsnFileName;
            try {
                fsn.getBundleIdList().add(kunID);
                fsn.writePokaFsnFile(mypath);
            } catch (IOException ex) {
                logger.log(Level.INFO, null, ex);
            }
            bas[0] = kunID;
            bas[1] = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss").format(date);
            //生成bk文件
            String fileName = bankId + "_" + netWorkId + "_XXXXXXXXXXXXXX_" + kunID + (bashu == 5 ? "_05" : "") + ".BK";
            String BKNamePath = StaticVar.cfgMap.get(argPro.localAddr) + File.separator + UploadFtp.tem + File.separator + fileName;
            IOUtil.writeBKFile(bas, BKNamePath);   //生成bk文件

            //update MoneyData set MachineId='1'  and BVResult=1
            //删除数据库数据
            maxdelid = maxdelid;
            bf = new StringBuilder();
            bf.append("delete from MoneyData where MachineId=:machineId  and (");
            bf.append(bf1.toString());
            bf.append(" ) ");
            bf.append(" and id<=:maxdelid");
            String delsql = bf.toString();
            //"delete from MoneyData where MachineId=:machineId  and BVResult=:type and id<=:maxdelid";
            Map<String, Object> myMap = new HashMap<String, Object>();

            myMap.put("machineId", machineMane);
            // myMap.put("type", type);
            myMap.put("maxdelid", maxdelid);
            if (moneyBase == null || dbreload) {
                moneyBase = new BaseDaoSqlServer<Map>();
                dbreload = false;
            }
            int result = moneyBase.executeSql(delsql, myMap);

            curKunList.add(kunID);

            curKunLabel.setText("捆数:" + curKunList.getItemCount());

            int paper = this.lastPaperSizeComboBox.getSelectedIndex();

            PostekUtil post = new PostekUtil();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            String printDate = sdf.format(date);

            String com = (String) this.comComboBox.getSelectedItem();

            if (0 == paper) {
                post.printWZ(com, printDate, auditer, monVal, inventory, kunID, bankName, bashu);
            } else {
                post.printGX100X50(com, printDate, auditer, monVal, inventory, kunID, bankName, bashu);
            }

            //上传BK文件
//            UploadFtp.oneFileUploadFtp(fileName, UploadFtp.bkbak);//          
            UploadFtp.uploadBkFile(BKNamePath, fileName);
            //上传FSN文件
//            UploadFtp.oneFileUploadFtp(fsnFileName, UploadFtp.fsnbak);
              UploadFtp.uploadFsnFile(mypath, fsnFileName);
           

            if (type == 1) {
                this.countA = 0;
                this.countB = 0;
                pokaFsn = new PokaFsn();
            } else {
                this.countAc = 0;
                this.countBc = 0;
                pokaFsnC = new PokaFsn();
            }
        }
        myList.clear();

    }

    private void scannerMoneyData() {
        getDataFromDB(1, 1);//机具1流通券
        getDataFromDB(2, 1);//机具2流通券

        getDataFromDB(1, 2);//机具1残损券
        getDataFromDB(2, 2);//机具2残损券
    }

//    private int checkUser() {
//        String user = this.qingdianyuanjTextField.getText().trim();
//        String checker = this.shenheyuanjTextField.getText().trim();
//
//        BaseDao<Map> b = new BaseDao<Map>();
//        String sql = "select"
//                + " USERCODE"
//                + " from"
//                + " USERINFO"
//                + " where"
//                + " USERNAME=:user";
//        Map<String, Object> map = new HashMap<String, Object>();
//        map.put("user", user);
//
//        List<Map> u = null;
//        try {
//            u = b.findBySql(sql, map);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "数据库连接错误，请检查数据库配置是否正确。");
//            return -1;
//        }
//
//        for (Map map1 : u) {
//            userCode = map1.get("USERCODE").toString();
//        }
//        if (u == null || u.size() == 0) {
//            return 1;
//        }
//
//        map.clear();
//        map.put("user", checker);
//
//        u = null;
//        try {
//            u = b.findBySql(sql, map);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "数据库连接错误，请检查数据库配置是否正确。");
//        }
//        for (Map map1 : u) {
//            checkerCode = map1.get("USERCODE").toString();
//        }
//        if (u == null || u.size() == 0) {
//            return 2;
//        }
//        return 0;
//    }
    String userCode = "";
    String checkerCode = "";


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox bachoice1;
    private javax.swing.JTextField bankNamejTextField;
    private javax.swing.JLabel canSunBaLabel;
    private java.awt.List canSunBalist;
    private javax.swing.JLabel canSunKunLabel;
    private java.awt.List canSunkunlist;
    private javax.swing.JLabel cansunMonLabel;
    private javax.swing.JComboBox comComboBox;
    private javax.swing.JButton initjButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTextField jijujTextField;
    private javax.swing.JComboBox lastPaperSizeComboBox;
    private javax.swing.JLabel liuTongBajLabel;
    private java.awt.List liuTongBalist;
    private javax.swing.JLabel liuTongKunjLabel;
    private java.awt.List liuTongKunlist;
    private javax.swing.JLabel liuTongMonLabel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JComboBox meTypeComboBox;
    private javax.swing.JTextField port;
    private javax.swing.JLabel portJLabel;
    private javax.swing.JTextField qingdianyuanjTextField;
    private javax.swing.JTextField shenheyuanjTextField;
    private javax.swing.JLabel showjLabel;
    private javax.swing.JButton sqlserverCfgjButton;
    private javax.swing.JButton startDealjButton;
    private javax.swing.JButton stopDealjButton;
    private javax.swing.JButton testButton;
    private javax.swing.JLabel userLabel1;
    private javax.swing.JLabel userjLabel;
    // End of variables declaration//GEN-END:variables

    private String filePath = StaticVar.cfgMap.get(argPro.localAddr) + File.separator + UploadFtp.qfFile;
    private List<MoneyData> myList = new ArrayList<MoneyData>();
    private List<MoneyData> myListC = new ArrayList<MoneyData>();
    private Timer myTimer = new Timer(20000, this);
    private int countA = 0;
    private int countB = 0;
    private int countAc = 0;
    private int countBc = 0;
    private BaseDaoSqlServer<Map> moneyBase = null;
    private PokaFsn pokaFsn = new PokaFsn();
    private PokaFsn pokaFsnC = new PokaFsn();
    private String[] args = null;
    private String[] argsC = null;
    private String inventory;  //清点员
    private String auditer;   //审核员
    private String jiju;     //机具
    private String juanbie; //劵别
    private String bankName; //银行名称
    private int guanNum = 0;    //冠字号个数
    private int guanNumc = 0;
    private String bankId;  //银行号
    private String netWorkId;  //网点号
    private int bashu = 0; //生成文件把数

    private boolean dbreload = false;

    private PokaMainFrame pokaMain;
    private String temPath = StaticVar.cfgMap.get(argPro.localAddr) + File.separator + "reUpload";  //临时存放路径

    private String[] mechType = new String[]{"光荣清分机", "辽宁聚龙清分机", "广电清分机", "中钞信达清分机", "韩国品牌清分机", "古鳌清分机","辽宁聚龙清分机二代"};
    
    @Override
    public void actionPerformed(ActionEvent e) {

        Thread tt = new Thread(new Runnable() {

            @Override
            public void run() {
                if (meTypeComboBox.getSelectedIndex() == 0) {
                    scannerMoneyData();//光荣清分机
                } else if (meTypeComboBox.getSelectedIndex() == 1) {//辽宁聚龙清分机
                    refreshFile(XmlSax.getInstance().getLLJLFileNameL(), XmlSax.getInstance().getLLJLFileNameC());
                } else if (meTypeComboBox.getSelectedIndex() == 2) {//广电清分机
                    refreshFile(XmlSax.getInstance().getGDFileNameL(), XmlSax.getInstance().getGDFileNameC());
                } else if (meTypeComboBox.getSelectedIndex() == 3) {//中钞信达清分机
                    refreshFile(XmlSax.getInstance().getZCXDFileNameL(), XmlSax.getInstance().getZCXDFileNameC());
                } else if (meTypeComboBox.getSelectedIndex() == 4) {//韩国品牌清分机
                    if (!koread_flag) {
                        koread_flag = true;
                        koreadLis.setListenPort(Integer.parseInt(port.getText().trim()));
                        koreadLis.setHandle(KoreanBrandExtensionHandler.class.getName());
                        koreadLis.setPath(filePath);                        
                        Thread threa = new Thread(koreadLis);
                        threa.start();
                        
                    }
                    refreshFile(XmlSax.getInstance().getKoreadFileNameL(), XmlSax.getInstance().getKoreadFileNameC());
                } else if (meTypeComboBox.getSelectedIndex() == 5){//古鳌清分机
                    if (!koread_flag) {
                        koreadLis.setListenPort(Integer.parseInt(port.getText().trim()));
                        koreadLis.setHandle(GuAoQin.class.getName());
                        koreadLis.setPath(filePath);
//                        koreadLis.startAccept();
                        koread_flag = true;
                        Thread threa = new Thread(koreadLis);
                        threa.start();
                    }
                    refreshFile(XmlSax.getInstance().getGuAaoFileNameL(),XmlSax.getInstance().getGuAaoFileNameC());
                }else if(meTypeComboBox.getSelectedIndex() == 6){ //聚龙清分机根据每条记录判断钞票类型的模式   
                    if (!koread_flag) {
                        koread_flag = true;
                        analysisFile(XmlSax.getInstance().getLanFangJuLlongFileName());                   
                        refreshFile(XmlSax.getInstance().getZCXDFileNameL(),XmlSax.getInstance().getZCXDFileNameC());
                        koread_flag = false;
                    }
                }
            }
        });
        tt.start();
    }
    private KoreanBrandExtension koreadLis = new KoreanBrandExtension();
    private Boolean koread_flag = false;
    
    /**
     * 解析聚龙清分机上传上来的fsn文件
     * @param rxt 过滤参数
     */
    public void analysisFile(String rxt){
        File dir = new File(filePath.trim());
        File[] files = dir.listFiles();
        if (files == null) {
            return;
        } 
        Pattern pattern = Pattern.compile(rxt);
        for (File file : files) {        
            if (file.isDirectory()) {
                continue;
            } else { 
                String fileName = file.getName();
                Matcher matcher = pattern.matcher(fileName);
                if (matcher.matches()) {//过滤文件名                    
                    File temFile = new File(filePath + File.separator + fileName + ".temFile");
                    if(file.renameTo(temFile)){
                        temFile.renameTo(file);
                    }else{
                        continue;
                    }     
                    myTimer.stop();
                    System.out.println(fileName);
                    PokaFsn temR = new PokaFsn();
                    try {
                        temR.readBaseFsnFile(file.getPath());   //读取FSN文件信息
                    } catch (IOException ex) {
                        logger.log(Level.INFO, null, ex);
                    }
                    List<PokaFsnBody> bd = temR.getbList();
                    pokaFsn.clear();
                    pokaFsnC.clear();
                    for (PokaFsnBody mybd : bd) {
                        String moneyType = mybd.getTfFlag();
//                      System.out.println(mybd.getsNo());
                        if(moneyType.equals("1")){      //流通钞                           
                            pokaFsn.getbList().add(mybd);
                        }else{
                            pokaFsnC.getbList().add(mybd);
                        }          
                    }
                }else{
                    continue;
                }
                file.delete();
            }
            //将解析的fsn文件重新命名,写入到qffile文件夹中       
            createFsnFile("1",pokaFsn);
            createFsnFile("2",pokaFsnC);
        } 
      myTimer.restart();
    }
    /**
     *  //生成fsn   
     * @param moneyType 钞票类型
     * @param pokaFsn类
     */
    public void createFsnFile(String moneyType,PokaFsn pokaFs){        
        //20150717_000005_0010_1_CNY.FSN
        if(pokaFs.getbList().size()==0){
            return;
        }
        Date date = BundleDeal.getDBTime();
        String mydate = new SimpleDateFormat("yyyyMMdd").format(date);
        String raondomDate = new SimpleDateFormat("ssS").format(date);
        String fsnFileName = mydate + "_000005_"+raondomDate+"_"+moneyType+"_CNY.FSN";     
        String fsnPath = StaticVar.cfgMap.get(argPro.localAddr) + File.separator + UploadFtp.qfFile + File.separator + fsnFileName;     
        try {            
            pokaFs.getFhead().setCount(pokaFs.getbList().size());
            pokaFs.writeBaseFsnFile(fsnPath);               
        } catch (IOException ex) {
            Logger.getLogger(GuanZiHaoDealJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
      
      
    }
    
    //private int count = 0;
    public void refreshFile(String rxt, String rxt2) {
        String monVal = "";
        File dir = new File(filePath.trim());
        File[] files = dir.listFiles();
        File temFile = new File(filePath + File.separator + "temFile");
        if (!temFile.getParentFile().exists()) {
            temFile.getParentFile().mkdirs();
        }
        if (files == null) {
            return;
        }
        //   String rxt = "[0-9A-Z]*_1_[0-9]{4}_[0-9]{17}[.]FSN$";
        //  String rxt2 = "[0-9A-Z]*_2_[0-9]{4}_[0-9]{17}[.]FSN$";
        Pattern pattern = Pattern.compile(rxt);
        Pattern pattern2 = Pattern.compile(rxt2);
        PokaFsn fsn = null;

        int curNum = 0;
        int baCo = 0;
        String[] bas = null;
        java.awt.List curBaList = null;
        java.awt.List curKunList = null;
        javax.swing.JLabel curBaLabel = null;
        javax.swing.JLabel curKunLabel = null;
        javax.swing.JLabel curMonLabel = null;

        boolean flag = false;
        myTimer.stop();
        String baId;
        int type = 0;
        for (File file : files) {
            flag = false;
            if (file.isDirectory()) {
            } else {
                String fileName = file.getName();
                Matcher matcher = pattern.matcher(fileName);
                if (matcher.matches()) {//流通
                    flag = true;
                    fsn = this.pokaFsn;
                    curBaList = this.liuTongBalist;
                    curKunList = this.liuTongKunlist;
                    curBaLabel = this.liuTongBajLabel;
                    curKunLabel = this.liuTongKunjLabel;
                    curMonLabel = this.liuTongMonLabel;
                    bas = this.args;
                    baCo = this.countA;
                    curNum = this.guanNum;
                    type = 1;
                } else {
                    matcher = pattern2.matcher(fileName);
                    if (matcher.matches() && XmlSax.getInstance().isNeedBreakQF()) {//残损
                        flag = true;
                        fsn = this.pokaFsnC;
                        curBaList = this.canSunBalist;
                        curKunList = this.canSunkunlist;
                        curBaLabel = this.canSunBaLabel;
                        curKunLabel = this.canSunKunLabel;
                        curMonLabel = this.cansunMonLabel;
                        bas = this.argsC;
                        baCo = this.countAc;
                        curNum = this.guanNumc;
                        type = 2;
                    }
                }
                if (flag) {
                    temFile = new File(filePath + File.separator + fileName + ".temFile");
                    if (file.renameTo(temFile)) {
                        temFile.renameTo(file);
                        PokaFsn temR = new PokaFsn();
                        try {
                            temR.readBaseFsnFile(file.getPath());   //读取FSN文件信息
                        } catch (IOException ex) {
                            logger.log(Level.INFO, null, ex);
                        }
                        List<PokaFsnBody> bd = temR.getbList();
                        for (PokaFsnBody mybd : bd) {
//                            mybd.setUserId1(this.qingdianyuanjTextField.getText().trim());  //打包员
//                            mybd.setUserId2(this.shenheyuanjTextField.getText().trim());  //复核员
                            mybd.setUserId1(bas[2]);
                            mybd.setUserId2(bas[3]);
                            mybd.setFlag((byte) 0);
                            monVal = "" + mybd.getValuta();
                            fsn.add(mybd);
                            curBaList.add(mybd.getsNo());
                            if (fsn.getFhead().getCount() % 100 == 0) {
                                baId = IOUtil.getBaID() + baCo;
                                fsn.addBundleId(baId);
                                bas[baCo + 4] = baId;
                                baCo++;
                                curBaLabel.setText("把数:" + baCo);
                            }
                            curNum++;
                            if (type == 1) {
                                this.countA = baCo;
                                this.guanNum = curNum;
                            } else {
                                this.countAc = baCo;
                                this.guanNumc = curNum;
                            }

                            curMonLabel.setText("冠字号个数:" + curNum);
                            if (baCo == bashu) {
                                juanbie = this.xml.getQuans(monVal, "" + bashu);
                                if (this.xml.getDiaoChaoLogin().equals("1")) {
                                    StaticVar.loginUser = qingdianyuanjTextField.getText();
                                }
                                //生成捆ID                     
                                String kunID = BundleDeal.productBKbunId(StaticVar.loginUser, juanbie, 1);
                                //生成fsn            
                                Date date = BundleDeal.getDBTime();
                                //String mydate = new SimpleDateFormat("yyyyMMddHHmmssS").format(date);
                                String fsnFileName = bankId + "_" + netWorkId + "_XXXXXXXXXXXXXX_" + kunID + ".FSN";
                                String mypath = StaticVar.cfgMap.get(argPro.localAddr) + File.separator + UploadFtp.tem + File.separator + fsnFileName;
                                try {
                                    fsn.getBundleIdList().add(kunID);
                                    fsn.writePokaFsnFile(mypath);
                                } catch (IOException ex) {
                                    Logger.getLogger(GuanZiHaoDealJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                bas[0] = kunID;
                                bas[1] = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss").format(date);
                                //生成bk文件
                                String newName = bankId + "_" + netWorkId + "_XXXXXXXXXXXXXX_" + kunID + (bashu == 5 ? "_05" : "") + ".BK";
                                String BKNamePath = StaticVar.cfgMap.get(argPro.localAddr) + File.separator + UploadFtp.tem + File.separator + newName;
                                IOUtil.writeBKFile(bas, BKNamePath);   //生成bk文件

                                //打印捆封签
                                //  this.kunCo++;
                                curKunLabel.setText("捆数:" + curKunList.getItemCount());
                                curKunList.add(kunID);

                                int paper = this.lastPaperSizeComboBox.getSelectedIndex();
                                PostekUtil post = new PostekUtil();
                                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                                String printDate = sdf.format(date);

                                String com = (String) this.comComboBox.getSelectedItem();

                                if (0 == paper) {
                                    post.printWZ(com, printDate, auditer, monVal, inventory, kunID, bankName, bashu);
                                } else {
                                    post.printGX100X50(com, printDate, auditer, monVal, inventory, kunID, bankName, bashu);
                                }

                                //上传BK文件
                                //UploadFtp.oneFileUploadFtp(newName, UploadFtp.bkbak);//         
                                UploadFtp.uploadBkFile(BKNamePath, newName);
                                //上传FSN文件
//                                UploadFtp.oneFileUploadFtp(fsnFileName, UploadFtp.fsnbak);
                                UploadFtp.uploadFsnFile(mypath, fsnFileName);
                                
                                baCo = 0;
                                curBaList.clear();

                                fsn.getbList().clear();
                                curBaLabel.setText("把数:" + baCo);
                                // fsn = new PokaFsn();
                                if (type == 1) {
                                    guanNum = 0;
                                    this.countA = 0;
                                    pokaFsn = new PokaFsn();
                                } else {
                                    guanNumc = 0;
                                    this.countAc = 0;
                                    pokaFsnC = new PokaFsn();
                                }
                            }
                        }

                    }
                    String date = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date());
                    File fNew = UploadFtp.newDir(StaticVar.cfgMap.get(argPro.localAddr) + File.separator + UploadFtp.basebak + File.separator + date + File.separator + fileName);
                    if (fNew.exists()) {
                        fNew.delete();
                    }
                    if (file.renameTo(fNew)) {
                        file.delete();
                    }
                }
            }
        }
        myTimer.restart();

    }

    @Override
    public void initLogin() {
        // this.pokaMain.fileChangeMenu.setEnabled(false);
        this.pokaMain.atmMenu.setEnabled(false);
        this.pokaMain.getGuangdianMenu().setEnabled(false);
        this.userLabel1.setText(StaticVar.loginName);
        this.qingdianyuanjTextField.setText(this.pokaMain.getLoginUserName());
        if (this.pokaMain.getLoginUser().length() <= 0) {
            this.qingdianyuanjTextField.setEditable(true);
        } else {
            this.qingdianyuanjTextField.setEditable(false);
        }
        this.shenheyuanjTextField.setText(this.pokaMain.getCheckUserName());
        if (this.pokaMain.getCheckUser().length() <= 0) {
            this.shenheyuanjTextField.setEditable(true);
        } else {
            this.shenheyuanjTextField.setEditable(false);
        }
    }

    /**
     * @param pokaMain the pokaMain to set
     */
    public void setPokaMain(PokaMainFrame pokaMain) {
        this.pokaMain = pokaMain;
    }
}
